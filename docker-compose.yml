version: '3.9'

services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB_FILE: /run/secrets/db_name
      POSTGRES_PORT: 5435
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
               -c wal_level=logical -p 5435
               -p 5435
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/db_user) -d $$(cat /run/secrets/db_name) -p 5435"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - '5435:5435' 
    secrets:
      - db_user
      - db_password
      - db_name
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - my_network

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --port 6390 --requirepass yourhardcodedpassword --save 60 1
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    ports:
      - "6390:6390"
    volumes:
      - redis_data:/data
    networks:
      - my_network

  app:
    build: .
    restart: always
    stdin_open: true
    tty: true
    volumes:
      - app_logs:/var/log/
      - ./schemas:/schemas
    depends_on:
      db:
        condition: service_healthy
      # kafka:
      #   condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5435
      DB_USER_FILE: /run/secrets/db_user
      DB_PASSWORD_FILE: /run/secrets/db_password
      DB_NAME_FILE: /run/secrets/db_name
      REDIS_ADDR: "redis:6390"
      REDIS_PASSWORD: "yourhardcodedpassword"
    secrets:
      - db_user
      - db_password
      - db_name
    ports:
      - "50051:50051"
    networks:
      - my_network
  migrate:
    build: 
      context: .
      dockerfile: migrations.Dockerfile
    volumes:
      - ./db/migrations:/db/migrations
    entrypoint: /entrypoint.sh
    depends_on:
      db:
        condition: service_healthy
    secrets:
      - db_user
      - db_password
      - db_name
    networks:
      - my_network
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.3.0
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - shared-network
  # kafka:
  #   image: confluentinc/cp-kafka:7.3.0
  #   depends_on:
  #     - zookeeper
  #   healthcheck:
  #     test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
  #     KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #   ports:
  #     - "9092:9092"
  #     - "9093:9093"
  #   networks:
  #     - shared-network
  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.3.0
  #   depends_on:
  #     - kafka
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
  #   ports:
  #     - "8081:8081"
  #   networks:
  #     - shared-network
  inspector:
    image: busybox
    volumes:
      - app_logs:/data
    command: sh -c "ls /data && cat /data/myapp.log"

  schema:
    build:
      context: ./schemas
      dockerfile: Dockerfile
    volumes:
      - ./schemas:/schemas
    networks:
      - my_network

secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
  db_name:
    file: ./secrets/db_name.txt

volumes:
  pg_data:
  redis_data:
  app_logs:
    external: true

networks:
  my_network:
    driver: bridge